#!/bin/bash -e

zm_path=$(readlink -f $0)
zm_workdir=${zm_path%/*}

SUDO=$(test "$(id -u)" = "0" || which sudo || true)

zm_version=0.04
zm_release=3


set -e 
set -E 

# cd $zm_workdir

sfs_mpath=/media/sfs
unionfs_mpath=/media/unionfs
sfs_part_mpath=/media/sfsroot
sfs_root_mpath=$sfs_mpath/root
sfs_home_mpath=$sfs_mpath/home
unionfs_max_branch=8
unionfs_clean_file=.unionfs.fs.clean

KERNEL_VERSION=$(uname -r | awk  -F '-' 'BEGIN{OFS="."}{print $1}' | awk  -F '.' 'BEGIN{OFS="."}{print $1,$2,$3}')

work_mountdir=/work
backup_mountdir=/media/backup
backup_workdir=/media/bak


log_file=/tmp/.zm.log
> $log_file
chmod 666 $log_file

err()
{   
    echo "Error: $@"
    exit 1
}

show_version ()
{   
    echo "$zm_version"
    exit 0
}

log_info()
{
    echo $@ >> $log_file
}

backup_file()
{
    local time_dir=$(date +%y%m%d_%H%M)
    while [ $# -gt 0 ]; do
        bak_file=$1
        shift
        if [ -e "$bak_file" ];then
            bak_file_dir=$(dirname $bak_file)/old/$time_dir
            $SUDO mkdir -p $bak_file_dir
            $SUDO mv -fv ${bak_file} ${bak_file_dir}/
        fi
    done
}

get_linux_kernel_code()  
{  
    #expr $(VERSION) \* 65536 + 0$(PATCHLEVEL) \* 256 + 0$(SUBLEVEL));  
    VERSION=`echo $1 | awk  -F '.' 'BEGIN{OFS="."}{print $1}'`  
    PATCHLEVEL=`echo $1 | awk  -F '.' 'BEGIN{OFS="."}{print $2}'`  
    SUBLEVEL=`echo $1 | awk  -F '.' 'BEGIN{OFS="."}{print $3}'`  
    #echo $VERSION  
    #echo $PATCHLEVEL  
    #echo $SUBLEVEL  
    KERNEL_CODE=`expr $VERSION \* 65536 + 0$PATCHLEVEL \* 256 + 0$SUBLEVEL` 
    echo $KERNEL_CODE  
}

download_file()
{
    src=$1
    dst=$2
    md5=$3
    DL="wget -c"

    if which axel;then
        if [ ! -e "$2" ];then
            axel $1 -o $2
        fi
    else
        wget -c $1 -O $2
    fi

    if [ -n "$md5" ];then
        echo "$md5 $dst" | md5sum -c 
    fi
}

select_yesno()
{
    info="$1"
    title="$2"

    if [ "$zm_auto_select" = "yes" ];then
        return 0
    fi

    if [ -z "$title" ];then
        cmd="dialog --stdout --yesno \"$info\" 0 0"
    else
        cmd="dialog --stdout --title \"$title\" --yesno \"$info\" 0 0"
    fi

    if eval $cmd;then
        return 0
    else
        return 1
    fi
}

dialog_continue()
{
    if ! select_yesno "$@";then
        if $zm_debug;then
            echo "$@"
        fi
        err "Select no and exit now."
    fi
}

dialog_checklist()
{
    local win_title=$1
    local list_title=$2

    if [ -z "$win_title" -o -z "$list_title"];then
        return 1
    fi

    shift 2
    cmd="dialog --title \"$win_title\" --stdout --checklist \"$listtitle\" 0 0 0 $@"
    if ret=$(eval $cmd);then
        echo $ret
    else
        echo ""
    fi
}

get_free_mem_size_m()
{
    free -m | grep Mem | awk '{print $4}'
}

need_root()
{
    if [ "$(id -u)" != "0" ]; then
        err "This function must be run as root" 1>&2
    fi
}

_add_samba_user()
{
    user=$1
    passwd=$2
    echo -e "$passwd\n$passwd" | smbpasswd -a $user -s
}


usage ()
{
    declare -a options
    declare -a msgs
    index=0

    add_help()
    {
        options[$index]="$1"
        msgs[$index]="$2"
        index=$(expr $index + 1)
    }

    add_help "--install-grub device" "install grub on device, device like /dev/sda1"
    add_help "--install-system device" "install system on device, device like /dev/sda1"
    add_help "--arch arch" "system arch, value: i386|amd64"
    add_help "--deb-ver" "debian version, value: stable|testing|unstable"
    add_help "--gen-initrd [output_dir]" "generate initrd.img"
    add_help "--gen-iso-system iso_file_path" "install system to iso file"
    add_help "--build-dir dir" "build temp dir"
    add_help "--install-zm dir" "install zm to dir"
    add_help "-k, --keep-build" "Keep the temporary directory used to make the image."
    add_help "--chroot chroot_options" "like chroot options."
    add_help "--install-softs" "install softs."
    add_help "-m, --make-system [output dir]" "make system"
    add_help "--kernel-name" "kernel name"
    add_help "--kernel-ver" "kernel ver"
    add_help "--zm-dir" "zm system dir"
    add_help "--zm-user" "zm system user's name"
    add_help "--zm-userdir" "zm system user's config dir"
    add_help "--backup-dir dir [name]" "backup dir to sfs"
    add_help "--backup-branch name" "backup dir branch"
    add_help "--remove-backup-branch name 0-$unionfs_max_branch" "remove backup branch"
    add_help "--mount-backup name" "mount backup"
    add_help "--remove-backup name" "remove backup"
    add_help "--umount-backup name" "umount backup"
    add_help "--backup-info name" "print backup sfs info"
    add_help "-i,--install-soft name" "install soft"
    add_help "--install-softs" "install all softs in config.sh"

    add_help "--print-workdir" "print workdir"
    add_help "--print-backup-workdir" "print backup workdir"
    add_help "--print-backup-mountdir" "print backup mountdir"
    add_help "--print-os-id" "print os id"
    add_help "--version" "print version"

    echo "Usage:  <options>"
    for pos in $(seq 0 $(expr $index - 1))
    do
        option="${options[pos]}"
        msg="${msgs[pos]}"
        if [ ${#option} -gt 30 ];then
            printf "  %-30s  \n" "$option"
            printf "  %-30s : %-s\n" "" "$msg"
        else
            printf "  %-30s : %-s\n" "$option" "$msg"
        fi
    done

    exit 0
}

debug_var()
{
    local var=$1
    eval value='$'$var
    printf "  %-15s : %-s\n" $var $value | tee -a $log_file
}

print_line()
{
    num=80
    output_char='-'
    output_str=$(yes $output_char | head -$num | tr -d '\n')
    echo "$output_str"
}

print_env()
{
    clear
    print_line
    debug_var deb_ver
    debug_var kernel_name
    debug_var kernel_ver
    debug_var kernel_params 
    debug_var zm_arch
    debug_var zm_dir
    debug_var zm_user
    debug_var zm_user_dir
    debug_var install_dir
    debug_var apt_url
    debug_var build_dir
    for var in $@
    do
        debug_var $var
    done
    print_line
}

get_dir_res_space()
{
    # df -B1 $1 | awk '{print $4}' | /bin/grep '[[:digit:]]'
    false
}

get_freesize_dir_mb()
{
    # size_mb=$(df -mP $1 | sed -n '2p' | awk '{print $4}')
    # echo ${size_mb}
    false
}

get_usedsize_dir_mb()
{
    size_mb=$(du -ms $1 | awk '{print $1}')
    echo ${size_mb}
}

get_file_size()
{
    echo $(stat -c '%s' $1)
}

check_file_exist()
{
    test -z $1 && err "Please input check_file_exist() param"

    file=$1
    test -e $file || err "Cann't find file $file."
}

check_binary()
{
    if ! which $1 > /dev/null;then
        err "Not have $1."
    fi
}

rm_safe()
{
    dir=$1

    if [ ! -d "$dir" ];then
        return
    fi

    if [ $(get_usedsize_dir_mb "$dir") -gt 100 ];then
        dialog_continue "Directory($dir) have more data, please check again."
    fi
    $SUDO rm -rf "$dir"
}

check_removeable_device()
{
    device=$1
    check_file_exist $device

    USBKEYS=($(
    grep -Hv ^0$ /sys/block/*/removable |
    sed s/removable:.*$/device\\/uevent/ |
    xargs grep -H ^DRIVER=sd |
    sed s/device.uevent.*$/size/ |
    xargs grep -Hv ^0$ |
    cut -d / -f 4
    ))
    echo $USBKEYS | grep -w $(basename $device) || err "$device is not remove disk"
}

print_disk_sizeinfo()
{
    if [ $# -gt 0 ];then
        fdisk -l $1 2>&1 | grep '^Disk /dev/.*:' | awk '{print $3$4}'
    fi
}

check_mount()
{
    cat /proc/mounts | grep "$1" > /dev/null
}

mount_device()
{
    last_param=${!#}
    if [ $# -gt 1 ];then
        $SUDO mount $@
    fi

    if [ ! -e $build_dir/.mount_devs ];then
        touch $build_dir/.mount_devs
    fi

    if grep "$last_param" $build_dir/.mount_devs > /dev/null;then
        echo "$last_param have mounted."
        return
    fi

    tmpfile=$build_dir/.mount_devs.temp
    (echo "$last_param" | cat - $build_dir/.mount_devs > $tmpfile) && mv $tmpfile $build_dir/.mount_devs
}

umount_device()
{
    if [ -e $build_dir/.mount_devs ];then
        $SUDO sh -c "cat /proc/mounts | grep $1 > /dev/null && umount $1 && sed -i \":^$1$:d\" $build_dir/.mount_devs || true"
    fi
}

sfs2dev()
{
    filename=$1
    device=$2
    restore_dir=$3

    echo -n "[ $FUNCNAME ] $filename -> $device "
    check_file_exist $filename
    check_file_exist $device

    mount_device $device $mnt_dir

    if [ ! -d $mnt_dir/$restore_dir ]; then 
        mkdir -p $mnt_dir/$restore_dir -m 0755
    fi
    sfs2dir $filename $mnt_dir/$restore_dir

    umount_device $mnt_dir
}

get_all_sfs()
{
    local sfsfile=$1
    if [ -e "$sfsfile" ];then
        echo ${sfsfile}
        for branch in $(seq 1 $unionfs_max_branch)
        do
            if [ -e "${sfsfile}.${branch}" ];then
                echo ${sfsfile}.${branch}
            fi
        done
    fi
}

update_label()
{
    device=$1
    label=$2
    real_label=`e2label $device`
    if [ '$real_label' != '$label' ];then
        e2label $device $label
    fi
}

boot_log()
{
    debug_file=/run/initramfs/initramfs-debug
    if [ -e "$debug_file" ];then
        $EDITOR $debug_file
    fi
}

update_grub_config()
{
    sfsroot_dev=$(mount | grep -w /media/sfsroot | awk '{print $1}')
    dialog_continue "update grub on $sfsroot_dev"
    gen_default_grub_config $sfsroot_dev
}

defalut_install_dir()
{
    install_dir=$1
    if [ -z "$install_dir" -a $# = 2 ];then
        install_dir="$2"
    fi
    if [ -z "$install_dir" ];then
        install_dir=$zm_dir
        if [ ! -d $zm_dir ];then
            mkdir -p ${sfs_part_mpath}
            mount_device LABEL=sfsroot ${sfs_part_mpath}
        fi
    fi
    check_file_exist $install_dir
}

zm_copy_source()
{
    local _dst_dir=$1

    $SUDO mkdir -p $_dst_dir/
    $SUDO $CP $zm_workdir/{zm,common,initramfs,mbak,user,Makefile,test} $_dst_dir/
    # git archive --format=tar.gz --prefix=zm/ HEAD > $1
}

install_grub()
{
    grub_device=$1
    echo "[ $FUNCNAME ] grub -> $grub_device  "

    grub_device=$(readlink -f $grub_device)
    check_file_exist $grub_device

    dialog_continue "Install grub on $grub_device"

    #恢复主扇区
    #  /sbin/install-mbr $(echo ${grub_device} | tr -d [0-9])
    #激活扇区
    # sfdisk -A11 ${grub_device}

    mount_device $grub_device $mnt_dir
    install_grub_on_dir $mnt_dir
    if [ -e $mnt_dir/boot/grub/config/default.cfg ];then
        echo "Overwrite $mnt_dir/boot/grub/config/default.cfg ?"
        dialog_continue now
    fi
    grub-mkdevicemap -m $mnt_dir/boot/grub/device.map
    # mount_device --bind /dev $mnt_dir/dev
    # chroot $mnt_dir grub-mkconfig -o /boot/grub/grub.cfg
    # umount_device $mnt_dir/dev
    disk_device=${grub_device/p[0-9]*}
    if [ "$disk_device" == "$grub_device" ];then
        disk_device=${grub_device/[0-9]*}
    fi
    grub-install $disk_device --no-floppy --root-directory=$mnt_dir --modules="biosdisk part_msdos"
    umount_device $mnt_dir
}

install_grub_on_dir()
{
    install_dir=$1
    check_file_exist $install_dir
    if [ ! -d $install_dir/boot ];then
        $CP $sfs_part_mpath/boot $install_dir
    fi
    # mkdir -p $install_dir/boot/grub
    # $CP /usr/lib/grub/i386-pc $install_dir/boot/grub/
}

format_usb_device()
{
    usb_device=$1
    check_removeable_device $usb_device

    umount "$usb_device"* > /dev/null 2>&1 || true
    umount "$usb_device"* > /dev/null 2>&1 || true
    umount "$usb_device"* > /dev/null 2>&1 || true
    if check_mount $usb_device;then 
        err "$usb_device is mounted!"
    fi

    total_size=` fdisk -l $usb_device | grep Disk | awk '{print $5}'`
    total_cyln=`echo $total_size/255/63/512 | bc`

    diskinfo=` sfdisk -H 255 -S 63 -C $total_cyln -l $usb_device | grep Disk`
    cylns=`echo $diskinfo | awk '{print $3}'`
    heads=`echo $diskinfo | awk '{print $5}'`
    sectors=`echo $diskinfo | awk '{print $7}'`
    disksize=`echo "$cylns*$heads*$sectors*512" | bc`
    echo disksize = $disksize
    ext2_size_bytes=2500000000
    fat_cyln=`echo "($disksize-$ext2_size_bytes)/$heads/$sectors/512" | bc`
    fat_sectors=`echo "$fat_cyln*$heads*$sectors" | bc`
    echo fat_cyln = $fat_cyln
    echo fat_sectors = $fat_sectors

    echo -n " $usb_device size is "
    print_disk_sizeinfo $usb_device
    echo "Format $usb_device now?"
    dialog_continue now

    dd if=/dev/zero of=$usb_device bs=512 count=63
    sync;sleep 1;
    blockdev --rereadpt $usb_device

    sfdisk --label dos $usb_device -H 255 -S 63 -C $total_cyln << EOF
,$fat_cyln,0xc,*
,,0x83,-
EOF
    sync;sync;sync

    sleep 3;
    umount "$usb_device"* > /dev/null 2>&1 || true
    umount "$usb_device"* > /dev/null 2>&1 || true
    umount "$usb_device"* > /dev/null 2>&1 || true
    if check_mount $usb_device;then 
        err "$usb_device is mounted!"
    fi

    blockdev --rereadpt $usb_device
    #  sfdisk -l $usb_device
    part1_dev=${usb_device}1
    part2_dev=${usb_device}2
    test -b $part1_dev || err "no part $part1_dev"
    test -b $part2_dev || err "no part $part2_dev"
    dd if=/dev/zero of=$part1_dev bs=512 count=1
    dd if=/dev/zero of=$part2_dev bs=512 count=1

    mkfs.vfat -n udisk $part1_dev
    mkfs.ext4 -L sfsroot_usb $part2_dev
    sync;sync;sync

    sleep 3;
    umount "$usb_device"* > /dev/null 2>&1 || true
    umount "$usb_device"* > /dev/null 2>&1 || true
    umount "$usb_device"* > /dev/null 2>&1 || true
    if check_mount $usb_device;then 
        err "$usb_device is mounted!"
    fi
}

gen_iso_file()
{
    check_binary genisoimage

    iso_label="sfs_iso"
    iso_filename=$1

    install_grub_on_dir $iso_dir
    temp_path=/linux/$zm_arch/${zm_user}
    echo "
    menuentry \"ZM($zm_arch) (default)\" --class debian {
    set gfxpayload=keep
    search --no-floppy -l --set=root $iso_label
    echo 'Loading kernel...'
    linux $temp_path/$kernel_name sfs_part=cdrom zm_user=$zm_user zm_arch=$zm_arch
    echo 'Loading initrd...'
    initrd $temp_path/$initrd_name
}
" > $iso_dir/boot/grub/grub.cfg

#生成iso grub 引导file
pushd .
cd $iso_dir/boot/grub/i386-pc
bootfile=g2hdr
# grub-mkimage -O i386-pc -o core.img biosdisk ext2 fat iso9660
grub-mkimage -O i386-pc -o core.img biosdisk iso9660
cat /usr/lib/grub/i386-pc/cdboot.img core.img > ../$bootfile
popd

rm -f $iso_filename
# “-b”后的文件路径不能是绝对路径，也不能是相对当前目录的路径，只能是相对于ISO源内容目录的路径。
genisoimage -V $iso_label -R -J -no-emul-boot -boot-load-size 4 -boot-info-table -b boot/grub/$bootfile -o $iso_filename $iso_dir
}

mount_storage()
{
    mount_src=$1
    mount_point=$2
    $SUDO mkdir -p $mount_point
    $SUDO mount $mount_src $mount_point || err "mount $@ error"
}

umount_storage()
{
    mount_point=$1
    if [ -e "$mount_point" ];then
        $SUDO umount $mount_point || err "umount $@ error"
        if [ -d "$mount_point" ];then
            $SUDO rmdir $mount_point
        fi
    fi
}

__set_lowerdir()
{
    local new=$1
    local orig=$2
    if [ -n "$orig" ];then
        echo ${new}:${orig}
    else
        echo $new
    fi
}

__mount_with_aufs()
{
    local sfsname="$1"
    local sfsdir="$2"
    local sfsmountdir=$3
    local upperdir="$4"
    local mountdir="$5"

    test -d "$upperdir" || err "upperdir: $upperdir is not found!"
    test -d "$mountdir" || err "mountdir: $mountdir is not found!"

    upperdir=$upperdir/aufs
    $SUDO mkdir -p $upperdir

    local sfsfile=$(readlink -f "${sfsdir}/${sfsname}.sfs")
    test -f "$sfsfile" || err "sfsfile: ${sfsdir}/${sfsname}.sfs is not found!"

    if [ -e "${upperdir}/$unionfs_clean_file" ];then
        $SUDO rm -rf ${upperdir}/{*,.[!.]*,..?*}
    fi

    local lowerdir=""
    local sfsmpath=$sfsmountdir/$sfsname

    mount_storage $sfsfile $sfsmpath
    lowerdir=$(__set_lowerdir ${sfsmpath}=rr $lowerdir)

    for branch in $(seq 1 $unionfs_max_branch)
    do
        if [ -e "${sfsfile}.${branch}" ];then
            mount_storage ${sfsfile}.${branch} ${sfsmpath}.${branch}
            lowerdir=$(__set_lowerdir ${sfsmpath}.${branch}=ro+wh $lowerdir)
            # $SUDO mount -t aufs -o remount,udba=none,add:1:${sfsmpath}.${branch}=ro+wh none $mountdir
            continue
        fi
        break
    done

    # $SUDO mount -t aufs -o br:$upperdir none $mountdir
    # $SUDO mount -t aufs -o remount,udba=none,append:${sfsmpath}=ro none $mountdir

    log_info "$FUNCNAME : lowerdir = $lowerdir"
    $SUDO mount -t aufs -o udba=none,br:$upperdir:$lowerdir none $mountdir
}

__mount_with_overlay()
{
    local sfsname="$1"
    local sfsdir="$2"
    local sfsmountdir=$3
    local upperdir="$4"
    local mountdir="$5"

    test -d "$upperdir" || err "upperdir: $upperdir is not found!"
    test -d "$mountdir" || err "mountdir: $mountdir is not found!"

    local workdir=$upperdir/work
    upperdir=$upperdir/upper
    $SUDO mkdir -p $workdir
    $SUDO mkdir -p $upperdir

    local sfsfile=$(readlink -f "${sfsdir}/${sfsname}.sfs")
    test -f "$sfsfile" || err "sfsfile: ${sfsdir}/${sfsname}.sfs is not found!"

    if [ -e "${upperdir}/$unionfs_clean_file" ];then
        $SUDO rm -rf ${upperdir}/{*,.[!.]*,..?*}
    fi

    local lowerdir=""
    local sfsmpath=$sfsmountdir/$sfsname

    mount_storage $sfsfile $sfsmpath
    lowerdir=$(__set_lowerdir ${sfsmpath} $lowerdir)

    for branch in $(seq 1 $unionfs_max_branch)
    do
        if [ -e "${sfsfile}.${branch}" ];then
            mount_storage ${sfsfile}.${branch} ${sfsmpath}.${branch}
            lowerdir=$(__set_lowerdir ${sfsmpath}.${branch} $lowerdir)
            continue
        fi
        break
    done

    # debug_var lowerdir
    options="lowerdir=$lowerdir,upperdir=$upperdir,workdir=$workdir"
    $SUDO mount -t overlay -o $options overlay $mountdir
}

mount_unionfs()
{
    # sfsname sfsdir sfsmountdir upperdir mountdir

    if modprobe overlay > /dev/null 2>&1;then
        __mount_with_overlay $@
    elif modprobe aufs > /dev/null 2>&1;then
        __mount_with_aufs $@
    else
        err "no support union filesystem."
    fi
}

zm_build_deb_checkinstall() 
{
    which checkinstall > /dev/null 
    $SUDO checkinstall --pkgname zm --pkgversion $zm_version --pkgarch all \
        --pkgrelease "${zm_release}" --pkglicense GPL --maintainer 51feel@gmail.com \
        --requires "checkinstall,debootstrap,genisoimage,mbr,squashfs-tools,dialog,syslinux" \
        -y --nodoc --deldesc=yes --delspec=yes --deldoc=yes --backup=no
    $SUDO dpkg -r zm
    $SUDO dpkg -i zm_${zm_version}-${zm_release}_all.deb
}

zm_build_deb() 
{
    local _deb_dir=$build_dir/deb
    local _install_dir=$build_dir/zm
    local _tar_file=$_deb_dir/zm.tar.gz

    # zm_git_url=

    mkdir -p $_deb_dir
    mkdir -p $_install_dir

    install_zm $_install_dir

    zm_copy_source $_install_dir
    tar czf ${_tar_file} -C $_install_dir . --exclude=.git

    export EMAIL='51feel@gmail.com'
    export DEBEMAIL='51feel@gmail.com'
    export DEBFULLNAME='Zeroman Yang'

    cd $_deb_dir
    dh_make -y -m --copyright=gpl -p zm_${zm_version} --file ${_tar_file} || true
    dpkg-buildpackage -d

}

get_sfs_cur_branch_num()
{
    local sfsfile=$1

    if [ ! -e "${sfsfile}" ];then
        err "${sfsfile} is not exist."
    fi

    local branch=0
    local cur_branch=0
    for branch in $(seq 1 $unionfs_max_branch)
    do
        if [ ! -e ${sfsfile}.${branch} ];then
            break
        fi
        cur_branch=$branch
    done

    echo $cur_branch
}

get_sfs_new_branch_num()
{
    local branch=$(get_sfs_cur_branch_num $1)

    if [ "$branch" = "$unionfs_max_branch" ];then
        err "$sfsfile have max branch."
    fi
    echo $(expr $branch + 1)
}

zm_chroot()
{
    param1="$1"
    shift

    extension=${param1##*.}
    if [ "$extension" = "sfs" ];then
        sfsname=$(basename $param1)
        name=${sfsname//.*}
        sfsdir=$(dirname $param1)
        mount_device -t tmpfs -o mode=755 tmpfs $unionfs_dir
        # sfsname sfsdir sfsmountdir upperdir mountdir
        mount_unionfs $name $sfsdir $sfs_mnt_dir $unionfs_dir $root_dir
        mount_device $sfs_mnt_dir/$name
        mount_device $root_dir
        chroot_dir=$root_dir
    else
        chroot_dir=$(readlink -f "$param1")
    fi

    test -e $chroot_dir/bin/bash
    $CP /etc/resolv.conf $chroot_dir/etc/resolv.conf
    mount_device -t proc -o nosuid,noexec,nodev proc $chroot_dir/proc
    mount_device -t sysfs -o nosuid,noexec,nodev,ro sys $chroot_dir/sys
    mount_device -t devtmpfs -o mode=0755,nosuid udev $chroot_dir/dev
    mount_device -t devpts -o mode=0620,gid=5,nosuid,noexec devpts $chroot_dir/dev/pts
    mount_device -t tmpfs -o mode=1777,nosuid,nodev shm $chroot_dir/dev/shm
    mount_device -t tmpfs -o nosuid,nodev,mode=0755 run $chroot_dir/run
    mkdir -p $chroot_dir/run/lock
    if [ -d /work/cache ];then
        mkdir -p $chroot_dir/work/cache
        mount_device --bind /work/cache/ $chroot_dir/work/cache
    fi

    echo "chroot to $chroot_dir "
    SHELL=/bin/bash unshare --fork --pid chroot $chroot_dir $@

    chroot_process=$(lsof -t $chroot_dir) || true
    if [ -n "$chroot_process" ];then
        kill -9 $chroot_process
    fi

    if [ -d /work/cache ];then
        umount_device $chroot_dir/work/cache
    fi
    umount_device $chroot_dir/run
    umount_device $chroot_dir/dev/shm
    umount_device $chroot_dir/dev/pts
    umount_device $chroot_dir/dev
    umount_device $chroot_dir/sys
    umount_device $chroot_dir/proc
}

get_kernel_file()
{
    if [ -z "$kernel_ver" ];then
        vmlinuz=$(readlink -f /vmlinuz)
    else
        vmlinuz=${kernel_name}-${kernel_ver}
    fi
    echo "$vmlinuz"
}

get_kernel_ver()
{
    ver=$kernel_ver
    if [ -z "$kernel_ver" ];then
        vmlinuz=$(get_kernel_file)
        ver=${vmlinuz#/boot/vmlinuz-}
    fi
    echo $ver
}

gen_kernel()
{
    defalut_install_dir $1
    vmlinuz=$(get_kernel_file)
    backup_file $install_dir/${kernel_name}
    $SUDO $CP $vmlinuz $install_dir/${kernel_name}
}

gen_initrd()
{
    defalut_install_dir $1
    kernel_ver=$(get_kernel_ver)
    backup_file $install_dir/${initrd_name}
    echo "Genarate $install_dir/${initrd_name}..."
    $SUDO mkinitramfs -d $zm_workdir/initramfs -o $install_dir/${initrd_name} $kernel_ver
}

gen_common_sfs()
{
    srcdir=$1
    dstsfs=$2
    shift 2

    check_binary mksquashfs

    backup_file ${dstsfs} ${dstsfs}.[0-9]

    temp_exclude_file=$(mktemp)
    echo "lost+found" >> $temp_exclude_file
    echo "$unionfs_clean_file" >> $temp_exclude_file
    echo "$@" | xargs -n1 >> $temp_exclude_file

    if $zm_debug;then
        cat $temp_exclude_file
    fi

    $SUDO mksquashfs ${srcdir} ${dstsfs} -comp lzo -regex -ef $temp_exclude_file
    $SUDO touch ${srcdir}/$unionfs_clean_file

    rm -f $temp_exclude_file
}

gen_root_sfs()
{
    gen_common_sfs $1 $2 \
        'sys/.* proc/.* run/.* 
    var/tmp/.* tmp/.* 
    media/.* mnt/.* dev/disk/.*/.* 
    etc/mtab etc/fstab 
    etc/udev/rules.d/70-.*net.* 
    etc/X11/xorg.conf* 
    usr/portage/distfiles/.* 
    etc/hal/fdi/policy/11-x11-vmmouse.fdi 
    usr/share/hal/fdi/policy/20thirdparty/11-x11-vmmouse.fdi 
    usr/bin/vmmouse_detect 
    var/cache/hald/fdi-cache 
    var/cache/apt/archives/.* 
    work/.* 
    home/.*/.*'
}

gen_home_sfs()
{
    gen_common_sfs $1 $2 \
        '.*/.xauth*
    .*/.serverauth
    .*/Downloads/.*
    .*/.cache
    .*/.backup/.*
    .*/.xsession-errors
    .*/.kermit.log
    .*libreoffice.*' 
}

update_system()
{
    local sels="$@"

    if [ -z "$sels" ];then
        local options=""
        options+='"kernel" "update kernel" "off" '
        options+='"initrd" "update initrd" "off" '
        options+='"root" "update root filesystem" "off" '
        options+='"home" "update home filesystem" "on" '
        sels=$(dialog_checklist "Update system" "Select update item:" $options)
        if [ -z "$sels" ];then
            return
        fi
    fi

    dialog_continue "[$sels] will update, continue?" "Update system"

    for sel in $sels;do
        case $sel in
            kernel)
                gen_kernel $zm_dir
                ;;
            initrd)
                gen_initrd $zm_dir
                ;;
            root)
                gen_root_sfs / $zm_dir/${root_sfs_name}
                ;;
            home)
                gen_home_sfs /home $zm_dir/${home_sfs_name}
                ;;
            *)
                ;;
        esac
    done
}

branch_system()
{
    local sels="$@"

    if [ -z "$sels" ];then
        local options=""
        options+='"root" "make branch on root filesystem" "on" '
        options+='"home" "make branch on home filesystem" "on" '
        sels=$(dialog_checklist "Update system" "Select update item:" $options)
        if [ -z "$sels" ];then
            return
        fi
    fi

    dialog_continue "[$sels] will be make branch, continue?" "Make branch"

    local sfsfile
    local branch

    print_env

    for sel in $sels;do
        case $sel in
            root)
                sfsfile=$zm_dir/${root_sfs_name}
                branch=$(get_sfs_new_branch_num $sfsfile)
                gen_root_sfs ${unionfs_root_mpath}/ ${sfsfile}.${branch}
                ;;
            home)
                sfsfile=$zm_dir/${home_sfs_name}
                branch=$(get_sfs_new_branch_num $sfsfile)
                gen_home_sfs ${unionfs_home_mpath}/ ${sfsfile}.${branch}
                ;;
            *)
                ;;
        esac
    done
}

__merge_with_aufs()
{
    for item in $@;do
        if [ -d "$item" ];then
            echo ""
        fi
        if [ -f "$item" ];then
            echo ""
        fi
    done
}

merge_branch()
{
    if modprobe overlay > /dev/null 2>&1;then
        __merge_with_overlay $@
    elif modprobe aufs > /dev/null 2>&1;then
        __merge_with_aufs $@
    else
        err "no support union filesystem."
    fi
}

sfs2dir()
{
    7z x $1 -o${2}
}

gen_default_grub_config()
{
    grub_device=$1

    label_suffix=""
    disk_label=$(e2label $grub_device)
    if echo $disk_label | grep sfsroot;then
        label_suffix=${disk_label/sfsroot}
    fi
    if [ ! -z "$label_suffix" ];then
        kernel_params+=" label_suffix=$label_suffix"
    fi

    boot_uuid=$(blkid -s UUID $grub_device | awk -F= '{print $2}' | tr -d '"')
    temp_dir=$(mktemp -d)
    mount_device $grub_device $temp_dir
    temp_path=/linux/${zm_user}.${os_name}.${zm_arch}.${deb_ver}
    echo "
    menuentry 'ZM linux $zm_user ($zm_arch)' --class=submenu --class debian {
    set root_uuid=$boot_uuid
    search --no-floppy --fs-uuid --set=root \$root_uuid
    set zm_dir=$temp_path
    echo 'Loading $zm_arch kernel...'
    linux \$zm_dir/${kernel_name} sfs_part=UUID=\$root_uuid $kernel_params 
    echo 'Loading $zm_arch initrd...'
    initrd \$zm_dir/${initrd_name}
}" > $temp_dir/boot/grub/config/default.cfg
sed "s/\bzm\b/$zm_user/g" $zm_workdir/common/linux.cfg > $temp_dir/boot/grub/config/linux.cfg
umount_device $temp_dir
rmdir $temp_dir
}

gen_iso_system()
{
    iso_file=$1
    test -z "$iso_file" && err "iso file is null"
    install_system $iso_dir
    gen_iso_file $iso_file
}

gen_usb_boot ()
{
    usb_device=$1
    check_file_exist $usb_device

    grub_device=${usb_device}2
    if [ ! -b ${grub_device} ];then
        format_usb_device $usb_device
    fi
    check_file_exist $grub_device
    install_grub $grub_device
    gen_default_grub_config $grub_device
}

gen_usb_system()
{
    usb_device=$1
    check_file_exist $usb_device

    if [ ! -b ${usb_device}2 ];then
        format_usb_device $usb_device
    else 
        disk_id=$(sfdisk --print-id $usb_device 2)
        if [ $disk_id != 83 ];then
            format_usb_device $usb_device
        fi
    fi
    usb_root_device=${usb_device}2
    check_file_exist $usb_root_device

    install_system $usb_root_device 
}

create_virtual_disk()
{
    check_binary install-mbr 
    check_binary syslinux


    disk_format=qcow2
    # disk_format=vdi
    # disk_format=vmdk

    root_file=/tmp/zm_root.$disk_format
    work_file=/tmp/zm_work.$disk_format
    root_size=32G
    work_size=64G

    if [ -e "$root_file" ];then
        dialog_continue "$root_file exists, delete it?"
        rm -f $root_file
    fi
    if [ -e "$work_file" ];then
        dialog_continue "$work_file exists, delete it?"
        rm -f $work_file
    fi

    print_env root_file work_file root_size work_size disk_format

    dialog_continue "Create virtual disk with $disk_format: [$root_file] [$work_file]"
    zm_auto_select="yes"

    if [ ! -e "$root_file" ];then
        qemu-img create -f $disk_format "$root_file" "$root_size"
    fi
    if [ ! -e "$work_file" ];then
        qemu-img create -f $disk_format "$work_file" "$work_size"
    fi
    qemu-nbd -d /dev/nbd0 || true
    qemu-nbd -d /dev/nbd1 || true
    rmmod nbd || true
    modprobe nbd max_part=16
    qemu-nbd --cache writeback -c /dev/nbd0 $root_file
    qemu-nbd --cache writeback -c /dev/nbd1 $work_file
    # qemu-nbd --cache writethrough -c /dev/nbd0 $root_file

    install-mbr --force /dev/nbd0
    # sudo dd if=/usr/lib/syslinux/mbr.bin of=/dev/nbd0

    parted -s -a optimal /dev/nbd0 mklabel msdos
    parted -s -a optimal /dev/nbd0 mkpart primary ext2 64s 100%
    parted -s -a optimal /dev/nbd1 mklabel msdos
    parted -s -a optimal /dev/nbd1 mkpart primary ext2 64s 100%

    while [ ! -e /dev/nbd0p1 ];do
        blockdev --rereadpt /dev/nbd0
        sleep 1
    done
    while [ ! -e /dev/nbd1p1 ];do
        blockdev --rereadpt /dev/nbd1
        sleep 1
    done
    mkfs.ext4 -L sfsroot /dev/nbd0p1
    mkfs.ext4 -L work /dev/nbd1p1

    install_system /dev/nbd0p1

    qemu-nbd -d /dev/nbd0
    qemu-nbd -d /dev/nbd1

    chmod 777 $root_file
    chmod 777 $work_file

    echo ""
    echo "kvm -m 2048 -hda $root_file -hdb $work_file"
    echo "kvm -m 1024 -hda $root_file"
    echo ""
}

default_zm_setup()
{
    echo "change root password..."
    echo root:'root' | chpasswd
}

auto_install()
{
    # export DEBIAN_FRONTEND=gnome
    export DEBIAN_FRONTEND=noninteractive

    install_softs

    zm_user_command zm_setup

    gen_kernel /media/install
    gen_initrd /media/install
    gen_root_sfs / /media/install/${root_sfs_name}
    # gen_home_sfs /home /media/install/${home_sfs_name}

    sync;sync;sync
}

make_system()
{
    need_root
    check_binary debootstrap

    print_env

    if [ ! -e "$root_dir/bin/sh" ];then
        if [ -d /work/cache/apt-archives ];then
            mkdir -p $root_dir/var/cache/apt/archives
            mount_device --bind /work/cache/apt-archives $root_dir/var/cache/apt/archives
        fi
        debootstrap --arch $zm_arch ${deb_ver} $root_dir $apt_url/debian
        if [ -d /work/cache/apt-archives ];then
            umount_device $root_dir/var/cache/apt/archives
        fi
    fi

    $zm_path --zm-user $zm_user --zm-userdir $zm_user_dir --install-zm $root_dir/

    mkdir -p $zm_dir
    mkdir -p $root_dir/media/install
    mount_device --bind $zm_dir $root_dir/media/install

    if $zm_debug;then
        zm_chroot $root_dir "zm --debug --zm-user $zm_user --deb-ver $deb_ver --arch $zm_arch auto_install"
    else
        zm_chroot $root_dir "zm --zm-user $zm_user --deb-ver $deb_ver --arch $zm_arch auto_install"
    fi

    umount_device $root_dir/media/install
}

install_system()
{
    dst=$1

    check_file_exist $root_sfs_file

    if [ "${dst_dir:0:4}" = '/dev' ];then
        if [ ! -b $dst ];then
            err "$dst_dir is not block file."
        fi
    fi
    if [ -b $dst ];then
        mount_device $dst $root_dir
        dst_dir=$root_dir
        install_grub $dst
        gen_default_grub_config $dst
    else
        dst_dir=$dst
        mkdir -p $dst_dir
    fi

    temp_dir=$dst_dir/linux/${zm_user}.${os_name}.${zm_arch}.${deb_ver}
    mkdir -p $temp_dir

    $CP $zm_dir/${kernel_name} $temp_dir
    $CP $zm_dir/${initrd_name} $temp_dir
    # gen_initrd $dst_dir/linux/$zm_arch/

    rsync -avP $root_sfs_file $temp_dir
    rsync -avP $root_sfs_file.[0-9] $temp_dir || true
    if [ -e $home_sfs_file ];then
        rsync -avP $home_sfs_file $temp_dir
        rsync -avP $home_sfs_file.[0-9] $temp_dir || true
    fi

    $zm_path --install-zm $root_dir

    sync;sync;sync

    # md5sum $temp_dir/${root_sfs_name}
    # md5sum $temp_dir/${initrd_name}

    if [ -b $dst ];then
        umount_device $dst_dir
    fi
}

add_soft()
{	
    echo "$@" >> $soft_list_file
}

apt_update()
{
    if [ ! -e /tmp/.zm_apt_update ];then
        echo "Testing internet connect status..."
        # nc -v -w 3 www.baidu.com -z 80
        nc -w 3 www.baidu.com -z 80

        echo "update system..."
        $APTGET update
        touch /tmp/.zm_apt_update
    fi
}

default_zm_setup_apt()
{
    temp_apt_src_file=$build_dir/sources.list
    > $temp_apt_src_file
    echo "deb $apt_url/debian $deb_ver main non-free contrib" >> $temp_apt_src_file
    echo "deb-src $apt_url/debian $deb_ver main non-free contrib" >> $temp_apt_src_file
    if [ "$deb_ver" != "unstable" ];then
        echo "deb $apt_url/debian $deb_ver-updates main non-free contrib" >> $temp_apt_src_file
        echo "deb $apt_url/debian $deb_ver-backports main non-free contrib" >> $temp_apt_src_file
        echo "deb $apt_url/debian-security/ $deb_ver/updates main non-free contrib" >> $temp_apt_src_file
        echo "deb-src $apt_url/debian $deb_ver-updates main non-free contrib" >> $temp_apt_src_file
        echo "deb-src $apt_url/debian $deb_ver-backports main non-free contrib" >> $temp_apt_src_file
        echo "deb-src $apt_url/debian-security/ $deb_ver/updates main non-free contrib" >> $temp_apt_src_file
    fi
    if ! diff $temp_apt_src_file /etc/apt/sources.list > /dev/null 2>&1;then
        mv $temp_apt_src_file /etc/apt/sources.list
    fi
}

add_base_softs()
{
    case $zm_arch in
        amd64)
            kernel_softs="linux-image-amd64 linux-headers-amd64"; 
            ;;
        *)
            kernel_softs="linux-image-686-pae linux-headers-686-pae"; 
            ;;
    esac

    add_soft "$kernel_softs"
    add_soft locales 
    add_soft bash bash-completion
    add_soft grub2 udev procinfo 
    add_soft aptitude lsof
    add_soft acpi-support acpi
    add_soft hdparm usbutils lshw 
    add_soft module-init-tools dosfstools exfat-utils ntfs-3g busybox mbr 
    add_soft iproute realpath gpm rsync util-linux gpart debootstrap pciutils 
    add_soft e2fsprogs
    add_soft lftp less bc
    add_soft ssh openssh-server nfs-common 
    add_soft vim gzip xz-utils 
    add_soft network-manager 
    add_soft dh-make
    # pigz lzip plzip pxz p7zip-full

    add_soft parted lvm2 initramfs-tools lsb-release genisoimage
    add_soft squashfs-tools aufs-tools 
}


download_softs()
{
    add_base_softs
    zm_user_command zm_add_softs
    zm_user_command zm_setup_apt
    apt_update

    _download_soft()
    {
        echo ">>>> download $@"
        $APTGET install -d -m $@
    }
    if $zm_debug;then
        cat $soft_list_file | while read line; do _download_soft $line; done
    else
        _download_soft $(cat $soft_list_file)
    fi
}

install_soft()
{
    param=$@
    test "$1" = "-qq" && shift
    if dpkg-query -f '${db:Status-Status}\n' -W $@ 2>&1 | grep -v ^installed > /dev/null 2>&1;then
        echo ">>>> install $@"
        $APTGET install $param
    fi
}

install_softs()
{
    print_env

    if [ $zm_arch = "amd64" ];then
        $SUDO dpkg --add-architecture i386
    fi

    download_softs

    $APTGET upgrade || true

    cat $soft_list_file | while read line; do install_soft -qq $line; done

    $SUDO $APTGET autoremove || true
}

dump_depends()
{
    softs=$(cat $soft_list_file)
    for deb in $softs
    do
        apt-cache -i depends $deb
        # apt-cache --no-suggests depends $deb
    done
    $SUDO apt-get install apt-rdepends
    apt-rdepends -d $softs > /tmp/dep.dot
    cat /tmp/dep.dot | less
    rm /tmp/dep.dot
}

zm_user_command()
{
    cmd=$1
    shift
    test -z "$cmd" && return
    if command -v $cmd > /dev/null 2>&1;then
        $cmd $*
        return
    fi

    def_cmd="default_$cmd"
    test -z "$def_cmd" && return
    if command -v $def_cmd > /dev/null 2>&1;then
        $def_cmd $*
    fi
}

zm_add_groups()
{
    groups="$@"
    for g in $groups
    do
        if ( grep $g /etc/group > /dev/null; ) && ! ( groups $zm_user | grep $g > /dev/null; );then
            usermod -a -G $g $zm_user
        fi
    done
}

install_zm()
{
    local _root_dir=$1
    if [ -z "$_root_dir" ];then
        _root_dir=""
    fi

    zm_copy_source $_root_dir/usr/share/zm

    local _user_dir=$(readlink -m $_root_dir/usr/share/zm/user/$zm_user)
    if [ "$zm_user_dir" != "$_user_dir" ];then
        rm_safe $_user_dir
        $SUDO mkdir -p $_user_dir
        $SUDO $CP $zm_user_dir/. $_user_dir/
    fi

    $SUDO mkdir -p $_root_dir/usr/bin
    $SUDO ln -svf /usr/share/zm/zm $_root_dir/usr/bin/zm

    # mkdir -p $_root_dir/usr/share/bash-completion/completions
    # ln -svf /usr/share/zm/common/complete.bash $_root_dir/usr/share/bash-completion/completions/zm
    $SUDO mkdir -p $_root_dir/etc/bash_completion.d/
    $SUDO ln -svf /usr/share/zm/common/complete.bash $_root_dir/etc/bash_completion.d/zm

    echo "install zm to $_root_dir/"
}

uninstall_zm()
{
    local _root_dir=$1
    if [ -z "$_root_dir" ];then
        _root_dir=""
    fi
    rm_safe $_root_dir/usr/bin/zm
    rm_safe $_root_dir/usr/share/zm
    rm_safe $_root_dir/etc/bash_completion.d/zm
}

run_zm_debconf()
{
    run_file=$1
    chmod +x $run_file
    $run_file
}

zm_setup_tzdata() 
{
    area=$1
    zone=$2
    echo "#!/bin/bash
    . $zm_workdir/common/init_debconf.sh

    rm -f /etc/localtime
    rm -f /etc/timezone
    db_set tzdata/Areas '$area' || true
    db_set tzdata/Zones/$area '$zone' || true
    db_fset tzdata/Areas seen true || true
    db_fset tzdata/Zones/$area seen true || true

    " > $build_dir/zm_debconf
    run_zm_debconf $build_dir/zm_debconf
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure -u tzdata || true
}

zm_setup_sh()
{
    default_shell=$1

    case "$default_shell" in
        bash) 
            echo "#!/bin/bash
            . $zm_workdir/common/init_debconf.sh
            db_set dash/sh 'false' || true
            db_fset dash/sh seen true || true
            " > $build_dir/zm_debconf
            ;;
        dash)
            echo "#!/bin/bash
            . $zm_workdir/common/init_debconf.sh
            db_set dash/sh 'true' || true
            db_fset dash/sh seen true || true
            " > $build_dir/zm_debconf
            ;;
        *)
            return
            ;;
    esac

    run_zm_debconf $build_dir/zm_debconf
    dpkg-reconfigure -u dash || true
}

zm_setup_default_locales()
{
    rm -f /etc/locale.gen

    echo "#!/bin/bash
    . $zm_workdir/common/init_debconf.sh

    db_set locales/locales_to_be_generated 'en_US.UTF-8 UTF-8, zh_CN.GBK GBK, zh_CN.UTF-8 UTF-8'
    db_subst locales/default_environment_locale locales 'en_US.UTF-8, zh_CN.GBK, zh_CN.UTF-8'
    db_set locales/default_environment_locale 'en_US.UTF-8'
    db_fset locales/default_environment_locale seen true
    db_fset locales/locales_to_be_generated seen true

    " > $build_dir/zm_debconf
    run_zm_debconf $build_dir/zm_debconf
    dpkg-reconfigure -u locales || true
}

zm_mount_backup()
{
    if [ -z "$@" ];then
        return
    fi


    bak_name="$1"
    bak_root_dir=$backup_workdir/$bak_name
    bak_unionfs_dir=$backup_mountdir/unionfs/$bak_name

    test -e $backup_mountdir/${bak_name}.sfs || return 1

    if ! readlink -e $bak_root_dir > /dev/null 2>&1;then
        $SUDO rmdir $bak_root_dir > /dev/null 2>&1 || true
    fi
    if ! mount | grep $bak_root_dir > /dev/null 2>&1;then
        $SUDO mkdir -m 700 -p $bak_root_dir
        $SUDO mkdir -m 700 -p $bak_unionfs_dir

        # __mount_with_unionfs $bak_name $backup_mountdir $sfs_mpath $bak_unionfs_dir $bak_root_dir
        mount_unionfs $bak_name $backup_mountdir $sfs_mpath $bak_unionfs_dir $bak_root_dir
        if [ $? != 0 ];then
            echo "mount unionfs error"
            $SUDO rmdir $bak_root_dir
            return 1
        fi

        $SUDO chown $UID $bak_unionfs_dir
        $SUDO chown $UID $bak_root_dir
    fi

    if [ -L $work_mountdir/$bak_name ];then
        bak_work_dir=$(readlink -e $work_mountdir/$bak_name)
        if [ "$bak_work_dir" = "$bak_root_dir" ];then
            echo $work_mountdir/$bak_name 
            return 0
        else
            rm -vf $work_mountdir/$bak_name
        fi
    fi

    if [ -e $work_mountdir/$bak_name ];then
        echo $bak_root_dir
        return 0
    fi

    ln -s $bak_root_dir $work_mountdir/$bak_name 
    echo $work_mountdir/$bak_name 
}

get_backup_unionfs_dir()
{
    local bak_name="$1"

    if modprobe overlay > /dev/null 2>&1;then
        echo "$backup_mountdir/unionfs/${bak_name}/upper"
    elif modprobe aufs > /dev/null 2>&1;then
        echo "$backup_mountdir/unionfs/${bak_name}/aufs"
    else
        err "no support union filesystem."
    fi
}

zm_backup_branch()
{
    local bak_name="$1"
    local sfsfile=$backup_mountdir/${bak_name}.sfs

    local bak_path=$(get_backup_unionfs_dir "$bak_name")

    branch=$(get_sfs_new_branch_num $sfsfile)
    gen_common_sfs $bak_path ${sfsfile}.${branch}
}

show_backup_info()
{
    for bak_name in $@;do
        local all_sfs=$(get_all_sfs $backup_mountdir/${bak_name}.sfs)
        if [ ! -z "$all_sfs" ];then
            ls -ltGch $all_sfs
        fi
        # find $backup_mountdir -maxdepth 1 -name ${bak_name}.sfs -printf "%P %c\n" 
    done
}

zm_backup_info()
{
    if [ $# -eq 0 ];then
        show_backup_info $(basename -s .sfs -a $(cd $backup_mountdir;/bin/ls *.sfs 2> /dev/null)) | less
    else
        show_backup_info $@
    fi
}

zm_backup_dir()
{
    local bak_dir="$1"
    local bak_name="$2"

    test -e "$bak_dir" || return 0

    local bak_path=$(readlink -e $bak_dir)
    if [ -z "$bak_name" ];then
        bak_name=$(basename $bak_path)
    fi

    local bak_sfs=$backup_mountdir/${bak_name}.sfs
    local new_bak_sfs=${bak_sfs}.new

    if [ -e "$new_bak_sfs" ];then
        whiptail --yesno "$bak_sfs is exist, continue?" 30 80
        if [ $? != 0 ];then
            return 0
        fi
        $SUDO chattr -i $new_bak_sfs
        $SUDO rm $new_bak_sfs
    fi

    gen_common_sfs $bak_path $new_bak_sfs

    local all_sfs=$(get_all_sfs $bak_sfs)
    if [ -n "$all_sfs" ];then
        $SUDO chattr -i $all_sfs
        backup_file $all_sfs
    fi

    $SUDO mv $new_bak_sfs $bak_sfs
    $SUDO chattr +i $bak_sfs
}


zm_check_backup()
{
    bak_params=$@
    if [ -z "$@" ];then
        bak_params='.'
    fi

    $SUDO mount | grep $sfs_mpath/$bak_name > /dev/null 2>&1 || return 1
    $SUDO mount | grep $unionfs_dir_dir/$bak_name > /dev/null 2>&1 || return 1
    # echo $bak_root_dir | grep $(readlink -e $PWD) > /dev/null && cd
    return 0
}

zm_remove_backup()
{
    local backup_unionfs_dir
    for bak_name in $@
    do
        bak_sfs=$backup_mountdir/${bak_name}.sfs

        if [ ! -e $bak_sfs ];then
            return 1
        fi

        local all_sfs=$(get_all_sfs $bak_sfs)
        if [ -n "$all_sfs" ];then
            $SUDO chattr -i $all_sfs
            backup_file $all_sfs
        fi
        backup_unionfs_dir=$backup_mountdir/unionfs/${bak_name}
        if [ -d $bakcup_unionfs_dir ];then
            $SUDO rm -rf "$backup_unionfs_dir"
        fi
    done
}

zm_remove_backup_branch()
{
    local bak_name=$1
    local del_branch=$2

    bak_sfs=$backup_mountdir/${bak_name}.sfs

    if [ ! -e $bak_sfs -o -z "$del_branch" ];then
        err "$FUNCNAME param error"
    fi

    local cur_branch=$(get_sfs_cur_branch_num $bak_sfs)
    start_branch=$(expr $cur_branch - $del_branch + 1)

    if [ $start_branch -lt 0 -o $start_branch -gt $(expr $cur_branch + 1) ];then
        err "$FUNCNAME branch param error."
    fi

    local backup_unionfs_dir=$(get_backup_unionfs_dir $bak_name)
    if [ -d "$backup_unionfs_dir" ];then
        $SUDO rm -rf "$backup_unionfs_dir"
    fi

    for branch in $(seq $start_branch $cur_branch);do
        local sfs=$backup_mountdir/${bak_name}.sfs.${branch}
        $SUDO chattr -i $sfs
        backup_file $sfs
    done
}

zm_umount_backup()
{
    bak_params=$1
    if [ -z "$1" ];then
        bak_params='.'
    fi

    $SUDO mount | grep $backup_mountdir > /dev/null 2>&1 || return

    if [ ! -e $backup_workdir ];then
        echo "zm backup dir is not exist."
        return 1
    fi

    for bak_name in $bak_params
    do

        if [ -z $bak_name -o "$bak_name" = '..' ];then
            echo "param error."
            return 0
        fi

        if [ $bak_name = '.' ];then
            bak_name=$(basename $(readlink -e $bak_name))
        fi

        umount_storage $backup_workdir/$bak_name 

        bak_zm_sfs_dir=$sfs_mpath/$bak_name
        for branch in $(seq 1 $unionfs_max_branch)
        do
            branch_sfs_mount_dir=${bak_zm_sfs_dir}.${branch}
            if [ -d "$branch_sfs_mount_dir" ];then
                umount_storage $branch_sfs_mount_dir
                continue
            fi
            break
        done  

        umount_storage $bak_zm_sfs_dir 

        bak_work_dir=$(readlink -f $work_mountdir/$bak_name)
        if [ "$bak_work_dir" = "$backup_workdir/$bak_name" ];then
            rm -vf $work_mountdir/$bak_name
        fi

        local bak_unionfs_dir=$backup_mountdir/unionfs/$bak_name
        for dir in upper aufs work/work work " ";do
            if [ -d $bak_unionfs_dir/$dir ];then
                $SUDO rmdir --ignore-fail-on-non-empty $bak_unionfs_dir/$dir
            fi
        done

    done
}



test_stable()
{
    echo "test"    
}

zm_argv_del()
{
    if [ -n "$1" ];then
        # zm_argv=${zm_argv/"$1"}
        zm_argv=$(echo " "$zm_argv" " | sed -e "s# $1 # #g" | xargs)
    fi
}

zm_config()
{

    while [ $# -gt 0 ]; do
        case $1 in
            --root-sfs) zm_argv_del $1;shift; root_sfs_name=$1; zm_argv_del $1;shift; 
                ;;
            --home-sfs) zm_argv_del $1;shift; home_sfs_name=$1; zm_argv_del $1;shift; 
                ;;
            --initrd) zm_argv_del $1;shift; initrd_name=$1; zm_argv_del $1;shift; 
                ;;
            --kernel-name) zm_argv_del $1;shift; kernel_name=$1; zm_argv_del $1;shift; 
                ;;
            --kernel-ver) zm_argv_del $1;shift; kernel_ver=$1; zm_argv_del $1;shift; 
                ;;
            --zm-user) zm_argv_del $1;shift; zm_user=$1; zm_argv_del $1;shift;
                ;;
            --zm-userdir) zm_argv_del $1;shift; zm_user_dir=$1; zm_argv_del $1;shift;
                ;;
            --zm-dir) zm_argv_del $1;shift; zm_dir=$1; zm_argv_del $1;shift;
                ;;
            --arch) zm_argv_del $1;shift; zm_arch=$1; zm_argv_del $1;shift;
                ;;
            --apt-url) zm_argv_del $1;shift; apt_url="$1"; zm_argv_del "$1";shift;
                ;;
            --deb-ver) zm_argv_del $1;shift; deb_ver=$1; zm_argv_del $1;shift;
                ;;
            --yes|-y) zm_argv_del $1;shift; zm_auto_select="yes";
                ;;
            --build-dir) zm_argv_del $1;shift; build_dir=$1; zm_argv_del $1;shift;
                ;;
            --keep-build|-k) zm_argv_del $1;shift; keep_build_dir="yes";
                ;;
            --kernel-params) zm_argv_del $1;shift; kernel_params="$1"; zm_argv_del $1;shift;
                ;;
            --debug) zm_argv_del $1;shift; zm_debug=true;
                ;;
            *) shift; 
                ;;
        esac
    done

    if $zm_debug;then
        set -x
        CP='/bin/cp -rafv'
    fi

    if [ -z "$build_dir" ];then
        if $zm_debug;then
            build_dir=/tmp/zm_build
            mkdir -p $build_dir
        else
            #can use TMPDIR change, see man mktemp
            build_dir=$(mktemp -d)
        fi
    fi

    test -d "$build_dir" || err "build_dir ($build_dir) isn't dir."
    if [ $(get_usedsize_dir_mb "$build_dir") -gt 5000 ];then
        dialog_continue "build dir($build_dir) have more data, please check again."
    fi

    mnt_dir=$build_dir/mnt
    iso_dir=$build_dir/iso
    sfs_mnt_dir=$build_dir/sfs
    unionfs_dir=$build_dir/unionfs
    root_dir=$build_dir/root
    dl_dir=$build_dir/dl

    soft_list_file=$build_dir/soft_list
    > $build_dir/soft_list


    mkdir -p $mnt_dir
    mkdir -p $iso_dir
    mkdir -p $sfs_mnt_dir
    mkdir -p $unionfs_dir
    mkdir -p $root_dir
    mkdir -p $dl_dir

    #trap zm_uninit ERR INT QUIT TERM EXIT
    trap zm_uninit ERR INT TERM EXIT

    if [ -z "$zm_user" ];then
        if [ -z "$SUDO_USER" ];then
            zm_user=$USER
        else
            zm_user=$SUDO_USER
        fi
    fi

    if [ -z "$zm_dir" ];then
        zm_dir=$sfs_part_mpath/linux/$zm_arch
        if [ -d "$zm_dir/$zm_user" ];then
            zm_dir="$sfs_part_mpath/linux/$zm_arch/$zm_user"
        fi
        os_name="debian"
        zm_dir=$sfs_part_mpath/linux/${zm_user}.${os_name}.${zm_arch}.${deb_ver}
    fi
    root_sfs_file=$zm_dir/${root_sfs_name}
    home_sfs_file=$zm_dir/${home_sfs_name}
    kernel_file=$zm_dir/${kernel_name}
    initrd_file=$zm_dir/${initrd_name}

    zm_user_home=$(grep $zm_user /etc/passwd | awk -F:  '{print $6}')
    if [ -z "$zm_user_dir" ];then
        if [ -d $zm_user_home/.zm ];then
            zm_user_dir=$zm_user_home/.zm
        else
            if [ -d $zm_workdir/user/$zm_user ];then
                zm_user_dir=$zm_workdir/user/$zm_user
            fi
        fi
    fi
    check_file_exist "$zm_user_dir"
    zm_user_dir=$(readlink -f $zm_user_dir)

    if [ -e $zm_user_dir/config.sh ];then
        source $zm_user_dir/config.sh
    fi

    zm_user_command zm_user_init


    if [ -z "$kernel_params" ];then
        if $zm_debug;then
            kernel_params="debug"
        else
            kernel_params="quiet"
        fi
    fi
}

zm_excute()
{
    while [ $# -gt 0 ]; do
        case $1 in
            --install-grub) shift; install_grub $1; test -z "$1" || shift; 
                ;;
            --install-system) shift; install_system $1; test -z "$1" || shift; 
                ;;
            --make-system) shift; make_system; exit 0;
                ;;
            --gen-kernel) shift; gen_kernel $1; test -z "$1" || shift; 
                ;;
            --gen-initrd) shift; gen_initrd $1; test -z "$1" || shift; 
                ;;
            --gen-root) shift; gen_root_sfs / $1/${root_sfs_name}; test -z "$1" || shift; 
                ;;
            --gen-home) shift; gen_home_sfs /home $1/${home_sfs_name}; test -z "$1" || shift; 
                ;;
            --branch-system|-b) shift; branch_system $1; test -z "$1" || shift; 
                ;;
            --gen-iso-system) shift; gen_iso_system $1; test -z "$1" || shift; 
                ;;
            --gen-usb-system) shift; gen_usb_system $1; test -z "$1" || shift; 
                ;;
            --gen-usb-boot) shift; gen_usb_boot $1; test -z "$1" || shift;
                ;;
            --download-softs|-d) download_softs; shift;
                ;;
            --install-soft|-i) shift; apt_update; install_soft $@; exit 0; shift
                ;;
            --install-softs) install_softs; shift
                ;;
            --debconf-softs) zm_user_command debconf_softs; shift 
                ;;
            --setup) zm_user_command zm_setup; shift
                ;;
            --update-system|-u) shift; update_system $@; test -z "$1" || shift; 
                ;;
            --install-zm) shift; install_zm $1; test -z "$1" || shift
                ;;
            --uninstall-zm) shift; uninstall_zm $1; test -z "$1" || shift
                ;;
            --edit|-e) $EDITOR $zm_path; exit 0;
                ;;
            --chroot) shift; zm_chroot $@; exit 0;
                ;;
            --build-deb) shift; zm_build_deb_checkinstall $1; exit 0;
                ;;
            --backup-dir) shift; zm_backup_dir $@; exit 0;
                ;;
            --backup-branch) shift; zm_backup_branch $1; exit 0;
                ;;
            --remove-backup-branch) shift; zm_remove_backup_branch $@; exit 0;
                ;;
            --mount-backup) shift; zm_mount_backup $@; exit 0;
                ;;
            --umount-backup) shift; zm_umount_backup $@; exit 0;
                ;;
            --remove-backup) shift; zm_remove_backup $@; exit 0;
                ;;
            --backup-info) shift; zm_backup_info $@; exit 0;
                ;;
            --version)
                show_version; exit 0;
                ;;
            *) 
                if type -t "$1" > /dev/null;then
                    func=$1
                    shift
                    echo "run $func"
                    $func $@
                else
                    echo "unsupport param $1"
                    shift
                fi
                ;;
        esac
    done
}

zm_init()
{
    if $zm_debug;then
        CP='/bin/cp -rafv'
    else
        CP='/bin/cp -raf'
    fi
    # aptitude -d -R -y install 
    # APTGET='apt-get --yes'
    # APTGET='apt-get --no-install-recommends --no-install-suggests --yes'
    APTGET="$SUDO apt-get --yes 
    --no-install-recommends 
    --no-install-suggests 
    -o Dpkg::Options::=--force-confdef 
    -o Dpkg::Options::=--force-confnew
    "
    if [ -d /work/cache/apt-archives ];then
        APTGET+=" -o Dir::Cache::Archives=/work/cache/apt-archives"
    fi

    cpu_counts=`cat /proc/cpuinfo | grep "processor" | wc -l`

    GZ=gzip
    LZ=lzip
    XZ=xz

    which pigz > /dev/null 2>&1 && GZ="pigz -p $cpu_counts"
    which plzip > /dev/null 2>&1 && LZ="plzip -n $cpu_counts"
    which pxz > /dev/null 2>&1 && XZ="pxz -T$cpu_counts"


    root_sfs_name="root.sfs"
    home_sfs_name="home.sfs"
    initrd_name="initrd.img"
    kernel_name="vmlinuz"
    kernel_ver=""
    kernel_params=""

    zm_dir=""
    zm_user=""
    zm_user_dir=""

    build_dir=""
    keep_build_dir="no"

    # deb_ver=testing
    deb_ver=$(cat /etc/apt/sources.list | grep deb | awk '{print $3}' | head -1)
    if [ "$deb_ver" != "stable" -a "$deb_ver" != "unstable" -a "$deb_ver" != "testing" ];then
        deb_ver="stable"
    fi

    zm_arch=$(dpkg --print-architecture)

    # no multimedia
    # apt_url=http://mirrors.163.com
    apt_url=http://mirrors.aliyun.com
    # apt_url=http://mirrors.sohu.com

    # have multimedia
    # apt_url=http://free.nchc.org.tw
    # apt_url=http://mirrors.ustc.edu.cn
    # apt_url=http://mirrors.xmu.edu.cn
    # apt_url=http://mirror.bjtu.edu.cn

    zm_auto_select="no"

    code_kernel_3_18=$(get_linux_kernel_code 3.18.0)
    code_kernel_now=$(get_linux_kernel_code $KERNEL_VERSION)
    #echo $code_kernel_3_18 $code_kernel_now

    if modprobe overlay > /dev/null 2>&1;then
        unionfs_root_mpath=$unionfs_mpath/root/upper
        unionfs_home_mpath=$unionfs_mpath/home/upper
    elif modprobe aufs > /dev/null 2>&1;then
        unionfs_root_mpath=$unionfs_mpath/root
        unionfs_home_mpath=$unionfs_mpath/home
    fi
}

zm_uninit()
{
    if $zm_debug;then
        set +x
        print_env
    fi
    trap - ERR INT TERM EXIT
    if [ -d "$build_dir" ];then
        if $zm_debug;then
            echo "$zm_path $zm_argv Clean ..."
        fi
        if [ -e $build_dir/.mount_devs ];then
            devs=`cat $build_dir/.mount_devs`
            for dev in $devs;do
                umount_device $dev || true
            done
            rm -rf $build_dir/.mount_devs
        fi
        if $zm_debug;then
            echo "In debug mode, please manual delete $build_dir"
        else
            if [ "$keep_build_dir" != "yes" ];then
                if [ $(get_usedsize_dir_mb "$build_dir") -gt 5000 ];then
                    dialog_continue "build dir($build_dir) have more data, please check again."
                fi
                rm -rf $build_dir 
            fi
        fi
    fi
}


###############################################################################
###############################################################################
###############################################################################

if [ $# -eq 0 -o "$1" = "--help" ];then
    usage
    exit 0
fi

case $1 in
    --print-workdir)
        echo $zm_workdir
        exit 0
        ;;
    --print-backup-workdir)
        echo $backup_workdir
        exit 0
        ;;
    --print-backup-mountdir)
        echo $backup_mountdir
        exit 0
        ;;
    --print-os-id)
        lsb_release -i -s
        exit 0
        ;;
    --print-max-branch)
        echo $unionfs_max_branch
        exit 0
        ;;
    *)
        ;;
esac

zm_argv=$@
zm_clean=true
zm_debug=false

export zm_debug

zm_init
zm_config $zm_argv
zm_excute $zm_argv
zm_uninit


